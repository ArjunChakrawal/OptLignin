function sol=yop_opt(param)

beta=param(1);
emax =param(2);
r =param(3);
% k=param(6);
% Create the Yop system
MGSystem = YopSystem( ...
    'states', 1, ...
    'controls', 1,...
    'parameters', 5 ...%     'model', @GrowthModel...
    );
MGSystem.p=param;
[dx, y] = GrowthModel(MGSystem.t, MGSystem.x, ...
                                     MGSystem.u, MGSystem.p);
% [dx, y] = GrowthModel(MGSystem.t, MGSystem.x, MGSystem.u);

% Set model expressions
MGSystem.set('ode', dx);
MGSystem.set('y', y);

time = MGSystem.t;
microbes = MGSystem.y;

ocp = YopOcp();
ocp.max({timeIntegral(emax.*beta.*(microbes.uptake - r)/(microbes.uptake + beta))});
ocp.st( ...
    'systems', MGSystem, ...
    ...% state bounds
    { 0  '<='   microbes.Cs    '<=' 1  }, ...
    ...% control bounds
    { 0  '<='   microbes.uptake    '<=' 10  }, ...
    ... % Initial conditions
    {0, '==', t_0(time)}, ...
    {1, '==', t_0(microbes.Cs)}, ...
    ... % Terminal conditions
    {0, '<=', t_f(time), '<=', inf} ...
...%     {2, '==', t_f(time)} ...
...%     {0, '==', t_f(microbes.Cs)} ...
...%     {0, '==', t_f(microbes.uptake)} ...
    );

% Solving the OCP

% sol = ocp.solve( ...%     'initialGuess', initialGuess, ...
%     'controlIntervals', 25, ...
%     'collocationPoints', 'radau', ...%    'polynomialDegree', 9, ...
%     'ipopt', struct('max_iter', 5000) ...
%     );

sol = ocp.solve('controlIntervals', 200,'collocationPoints','radau',...
    'ipopt', struct('max_iter', 5000));
% sol = ocp.solve('initialGuess', sol);





end