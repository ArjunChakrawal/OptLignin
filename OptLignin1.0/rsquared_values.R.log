
R version 4.3.2 (2023-10-31 ucrt) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> 
> library("readxl")
> library(modelsummary)
> library(lmerTest)
Loading required package: lme4
Loading required package: Matrix

Attaching package: 'lmerTest'

The following object is masked from 'package:lme4':

    lmer

The following object is masked from 'package:stats':

    step

> library(lme4)
> library(performance)
> 
> # get data and apply transformations--------
> 
> my_data = read_excel("data_forRStudio.xlsx")
> 
> my_data$studyID = as.factor(my_data$studyID)
> my_data$LitterType = as.factor(my_data$LitterType)
> my_data$Ntreat = as.factor(my_data$Ntreat)
> 
> c= quantile(my_data$tau, .5)^2/quantile(my_data$tau, .75)
> c= min(my_data$tau[my_data$tau>0])/2
> 
> my_data$log_tau_C = log(my_data$tau+c)
> my_data$logrO = log(my_data$ro)
> my_data$logvh= log(my_data$vhmax)
> my_data$logavgvo = log(my_data$avg_vo)
> my_data$logmaxvo = log(my_data$max_vo)
> 
> my_data$MATC=my_data$MATC+273
> my_data$sTemp =  datawizard::standardize(my_data$MATC)
> my_data$cMAP =  datawizard::standardize(my_data$MAPMm)
> my_data$sCN0 =  datawizard::standardize((my_data$CN0))
> my_data$sARC0 =  datawizard::standardize(my_data$ARC0)
> my_data$cAN0 =  datawizard::standardize(my_data$AN0)
> 
> 
> # LMM fitting ------------
> ## lmer ------------
> models <- list(
+   "log(tau+K)" = lmer(log(tau+c)~ (sTemp +sCN0+sARC0)^2 + (1|studyID), data = my_data,REML = FALSE),
+   "log(r_O)" = lmer(log(ro)~ (sTemp+sCN0+sARC0)^2 + (1|studyID),data = my_data,REML = FALSE),
+   "log(v_H)"     = lmer(log(vhmax)~ (sTemp+sCN0+sARC0)^2 + (1|studyID),data = my_data,REML = FALSE),
+   "log(avg. v_O)" = lmer(log(avg_vo)~ (sTemp+sCN0+sARC0)^2 + (1|studyID),data = my_data,REML = FALSE),
+   "log(max v_O)" = lmer(log(max_vo)~ (sTemp+sCN0+sARC0)^2 + (1|studyID),data = my_data,REML = FALSE)
+   # "log(voAtTau)" = lmer(log(voAtTau)~ (sTemp+sCN0+sARC0)^2 + (1|studyID),data = my_data,REML = FALSE)
+ )
> 
> ## modelsummary ------
> modelsummary(models,fmt = 2,
+              estimate  = "{estimate} ({std.error}){stars}",
+              statistic = NULL,
+              notes = list('Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1'),
+              gof_omit = 'ICC|RMSE',
+              output = "table.docx"
+ )
> rsquared <-r2(models$`log(v_H)`)
> 
> rsquared$R2_conditional
Conditional R2 
     0.8176978 
> 
> # Function to calculate and extract R-squared values
> get_rsquared <- function(model) {
+   rsquared <- r2(model)
+   return(c(marginal = rsquared$R2_marginal, conditional = rsquared$R2_conditional))
+ }
> 
> get_rsquared(models$`log(v_H)`)
      marginal.Marginal R2 conditional.Conditional R2 
                 0.3693495                  0.8176978 
> # Apply the function to all models
> rsquared_values <- sapply(models, get_rsquared)
> 
> # Convert the result to a data frame
> rsquared_df <- as.data.frame(t(rsquared_values))
> 
> # Add model names as a column
> rsquared_df$model <- rownames(rsquared_df)
> 
> # Write the result to a CSV file
> write.csv(rsquared_df, "rsquared_values.csv", row.names = FALSE)
> 
> 
> 
> 
> library("readxl")
> library("ggplot2")
> library("GGally")
Registered S3 method overwritten by 'GGally':
  method from   
  +.gg   ggplot2
> library(effects)
Loading required package: carData
lattice theme set by effectsTheme()
See ?effectsTheme for details.
> library(modelsummary)
> library(lmerTest)
> library(lme4)
> library(sjPlot)
Install package "strengejacke" from GitHub (`devtools::install_github("strengejacke/strengejacke")`) to load all sj-packages at once!
> library(sjmisc)
> library(MuMIn)
> library(performance)
> library(dplyr)

Attaching package: 'dplyr'

The following objects are masked from 'package:stats':

    filter, lag

The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union

> library(latex2exp)
> library(corrplot)
corrplot 0.92 loaded
> library(boot)
> library(glmmTMB)
> 
> # get data and apply transformations--------
> 
> my_data = read_excel("data_forRStudio.xlsx")
> 
> my_data$studyID = as.factor(my_data$studyID)
> my_data$LitterType = as.factor(my_data$LitterType)
> my_data$Ntreat = as.factor(my_data$Ntreat)
> 
> c= quantile(my_data$tau, .5)^2/quantile(my_data$tau, .75)
> c= min(my_data$tau[my_data$tau>0])/2
> 
> my_data$log_tau_C = log(my_data$tau+c)
> my_data$logrO = log(my_data$ro)
> my_data$logvh= log(my_data$vhmax)
> my_data$logavgvo = log(my_data$avg_vo)
> my_data$logmaxvo = log(my_data$max_vo)
> 
> my_data$MATC=my_data$MATC+273
> my_data$sTemp =  datawizard::standardize(my_data$MATC)
> my_data$cMAP =  datawizard::standardize(my_data$MAPMm)
> my_data$sCN0 =  datawizard::standardize((my_data$CN0))
> my_data$sARC0 =  datawizard::standardize(my_data$ARC0)
> my_data$cAN0 =  datawizard::standardize(my_data$AN0)
> str(my_data)
tibble [200 × 24] (S3: tbl_df/tbl/data.frame)
 $ studyID   : Factor w/ 20 levels "1","2","3","4",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ LitterType: Factor w/ 5 levels "1","2","3","4",..: 3 3 3 3 3 3 3 3 3 3 ...
 $ Ntreat    : Factor w/ 2 levels "0","1": 1 1 1 1 1 1 1 1 1 1 ...
 $ MATC      : num [1:200] 277 277 277 277 277 ...
 $ MAPMm     : num [1:200] 609 609 609 609 609 609 609 609 609 609 ...
 $ CN0       : num [1:200] 131.6 125 113.6 113.6 71.4 ...
 $ ARC0      : num [1:200] 0.0446 0.0534 0.0512 0.0502 0.0538 0.0536 0.0462 0.044 0.0416 0.0692 ...
 $ AN0       : num [1:200] 5.87 6.68 5.82 5.7 3.84 ...
 $ tau       : num [1:200] 532 174 186 267 153 ...
 $ vhmax     : num [1:200] 0.00109 0.00102 0.00116 0.00118 0.00129 ...
 $ avg_vo    : num [1:200] 0.000697 0.000842 0.001002 0.000913 0.001206 ...
 $ ro        : num [1:200] 16.5 15.6 14.8 17 16.6 ...
 $ max_vo    : num [1:200] 0.00131 0.00128 0.00145 0.00141 0.00172 ...
 $ voAtTau   : num [1:200] 2.25e-04 7.74e-05 1.71e-04 1.91e-04 2.59e-04 ...
 $ log_tau_C : num [1:200] 6.29 5.19 5.25 5.6 5.06 ...
 $ logrO     : num [1:200] 2.8 2.75 2.7 2.83 2.81 ...
 $ logvh     : num [1:200] -6.82 -6.89 -6.76 -6.74 -6.66 ...
 $ logavgvo  : num [1:200] -7.27 -7.08 -6.91 -7 -6.72 ...
 $ logmaxvo  : num [1:200] -6.64 -6.66 -6.53 -6.56 -6.37 ...
 $ sTemp     : 'dw_transformer' num [1:200] -1.16 -1.16 -1.16 -1.16 -1.16 ...
  ..- attr(*, "center")= num 285
  ..- attr(*, "scale")= num 7.16
  ..- attr(*, "robust")= logi FALSE
 $ cMAP      : 'dw_transformer' num [1:200] -1.23 -1.23 -1.23 -1.23 -1.23 ...
  ..- attr(*, "center")= num 1705
  ..- attr(*, "scale")= num 892
  ..- attr(*, "robust")= logi FALSE
 $ sCN0      : 'dw_transformer' num [1:200] 0.4973 0.4333 0.3228 0.3228 -0.0879 ...
  ..- attr(*, "center")= num 80.5
  ..- attr(*, "scale")= num 103
  ..- attr(*, "robust")= logi FALSE
 $ sARC0     : 'dw_transformer' num [1:200] -0.689 -0.341 -0.428 -0.467 -0.325 ...
  ..- attr(*, "center")= num 0.062
  ..- attr(*, "scale")= num 0.0253
  ..- attr(*, "robust")= logi FALSE
 $ cAN0      : 'dw_transformer' num [1:200] 0.137 0.251 0.13 0.114 -0.148 ...
  ..- attr(*, "center")= num 4.89
  ..- attr(*, "scale")= num 7.1
  ..- attr(*, "robust")= logi FALSE
> summary(my_data)
    studyID   LitterType Ntreat       MATC           MAPMm     
 18     :40   1: 19      0:139   Min.   :270.1   Min.   : 370  
 1      :32   2:113      1: 61   1st Qu.:276.8   1st Qu.: 978  
 5      :15   3: 35              Median :283.0   Median :1772  
 8      :15   4:  4              Mean   :285.1   Mean   :1705  
 11     :14   5: 29              3rd Qu.:289.2   3rd Qu.:2487  
 12     :14                      Max.   :299.0   Max.   :3850  
 (Other):70                                                    
      CN0               ARC0               AN0                tau        
 Min.   :  10.33   Min.   :0.002129   Min.   : 0.06415   Min.   :   0.0  
 1st Qu.:  47.21   1st Qu.:0.044520   1st Qu.: 2.26358   1st Qu.:   0.0  
 Median :  60.99   Median :0.057800   Median : 4.41227   Median :   0.0  
 Mean   :  80.46   Mean   :0.062010   Mean   : 4.89326   Mean   : 108.5  
 3rd Qu.:  91.94   3rd Qu.:0.078822   3rd Qu.: 6.13942   3rd Qu.: 147.1  
 Max.   :1379.00   Max.   :0.124022   Max.   :97.25886   Max.   :1029.4  
                                                                         
     vhmax               avg_vo                ro               max_vo         
 Min.   :0.0004441   Min.   :0.0002078   Min.   :  0.4974   Min.   :0.0004834  
 1st Qu.:0.0013028   1st Qu.:0.0008406   1st Qu.:  3.2599   1st Qu.:0.0016153  
 Median :0.0018724   Median :0.0016923   Median : 11.1735   Median :0.0025662  
 Mean   :0.0025833   Mean   :0.0027693   Mean   : 20.7447   Mean   :0.0052041  
 3rd Qu.:0.0035958   3rd Qu.:0.0041711   3rd Qu.: 25.8179   3rd Qu.:0.0062027  
 Max.   :0.0112611   Max.   :0.0125813   Max.   :128.9852   Max.   :0.0495664  
                                                                               
    voAtTau            log_tau_C         logrO             logvh       
 Min.   :2.895e-06   Min.   :1.629   Min.   :-0.6985   Min.   :-7.719  
 1st Qu.:1.905e-04   1st Qu.:1.629   1st Qu.: 1.1816   1st Qu.:-6.643  
 Median :5.476e-04   Median :1.629   Median : 2.4135   Median :-6.281  
 Mean   :1.371e-03   Mean   :3.160   Mean   : 2.2219   Mean   :-6.168  
 3rd Qu.:1.493e-03   3rd Qu.:5.025   3rd Qu.: 3.2511   3rd Qu.:-5.628  
 Max.   :9.397e-03   Max.   :6.942   Max.   : 4.8597   Max.   :-4.486  
                                                                       
    logavgvo         logmaxvo          sTemp              cMAP        
 Min.   :-8.479   Min.   :-7.635   Min.   :-2.0922   Min.   :-1.4973  
 1st Qu.:-7.081   1st Qu.:-6.428   1st Qu.:-1.1567   1st Qu.:-0.8156  
 Median :-6.382   Median :-5.965   Median :-0.2910   Median : 0.0746  
 Mean   :-6.358   Mean   :-5.789   Mean   : 0.0000   Mean   : 0.0000  
 3rd Qu.:-5.480   3rd Qu.:-5.083   3rd Qu.: 0.5747   3rd Qu.: 0.8762  
 Max.   :-4.376   Max.   :-3.004   Max.   : 1.9431   Max.   : 2.4044  
                                                                      
      sCN0             sARC0              cAN0         
 Min.   :-0.6823   Min.   :-2.3688   Min.   :-0.68018  
 1st Qu.:-0.3235   1st Qu.:-0.6919   1st Qu.:-0.37039  
 Median :-0.1894   Median :-0.1665   Median :-0.06775  
 Mean   : 0.0000   Mean   : 0.0000   Mean   : 0.00000  
 3rd Qu.: 0.1117   3rd Qu.: 0.6650   3rd Qu.: 0.17552  
 Max.   :12.6331   Max.   : 2.4531   Max.   :13.00967  
                                                       
> 
> # correlation and histogram -----------
> col=c('sTemp','cMAP','sCN0','sARC0','cAN0','log_tau_C','logrO','logvh','logavgvo','logmaxvo')
> M = cor(my_data[col])
> colnames(M)= c('$MAT[0][S]','$MAP[0][S]','$CN[0][S]','$ARC[0][S]','$AN[0][S]','$log(tau+K)','$log(r[O])',
+                '$log(v[H])','$log(bar(v)[O])','$log(max((v[O])))')
> rownames(M)=colnames(M)
> png("results/FigureS4.png", width = 12, height = 8, units = "in", res = 300)  # Adjust width and height as needed
> corr_plot=corrplot(M, method = 'circle', type = 'lower',diag = FALSE,
+                    addCoef.col = 'black',
+                    tl.srt = 45,tl.col = 'black'
+ )
> dev.off()
null device 
          1 
> graphics.off()
> 
> proc.time()
   user  system elapsed 
  11.00    1.03   12.68 
